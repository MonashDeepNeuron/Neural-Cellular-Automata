import createMetadata from '@/util/createMetadata';
import Image from 'next/image';
import Link from 'next/link';

export const metadata = createMetadata({
	title: 'Research',
	description: "Read summaries of research paper's we find interesting!"
});

export default function Research() {
	return (
		<div className='max-w-4xl mx-auto px-6 py-10 text-gray-800'>
			{/* Main Content */}
			<h1 className='text-4xl font-bold mb-4 text-center'>Neural Cellular Automata</h1>
			<h3 className='text-lg text-gray-600 text-center mb-2'>- Top 5 Papers, Summarised!</h3>
			<p className='text-center text-gray-400 italic'>Last updated Mar 2025</p>

			{/* Paper 1: Growing NCA */}
			<section className='mb-8'>
				<h2 className='text-2xl font-semibold text-purple-mdn mt-6'>Growing Neural Cellular Automata</h2>
				<p>
					Differentiable Model of Morphogenesis, <i>Feb. 11, 2020</i>. doi:{' '}
					<Link
						href='https://doi.org/10.23915/distill.00023'
						className='text-purple-mdn font-semibold hover:underline hover:text-purple-mdn-dark transition'
					>
						10.23915/distill.00023
					</Link>
				</p>
				<h4 className='italic text-gray-600'>Alexander Mordvintsev, Ettore Randazzo, Eyvind Niklasson, Michael Levin</h4>
				<p className='py-3'>
					Neural Cellular Automata (NCA) are used here to simulate individual cells. In particular, the paper demonstrated the capacity of
					NCA to model multicellular morphogenesis, or how a single cell can split, differentiate, and become a complete living being. To
					achieve behaviour resembling real biology, the following techniques are used:
				</p>
				<ul className='list-disc list-inside ml-4'>
					<li>
						<b>Convolutional Network architecture:</b> The neural net is trained such that all cells in the simulation have the same model,
						similar to how all biological cells in an organism have the same DNA.
					</li>
					<li>
						<b>Hidden channels:</b> The state of a cell is represented as a 16 channel vector, of which only the first 4 are visualised. The
						12 other channels are intended to simulate inter-cell communication such as hormone signalling or electrical pulses
					</li>
					<li>
						<b>Alive masking:</b> the alpha value (4th channel) is used to encode whether the cell is alive. Cells deemed as "dead" do not
						update. The simulation begins with a single live cell.
					</li>
					<li>
						<b>Stochastic updates:</b> cell updates trigger randomly, mimicking how biological cells may split or change at different times.
					</li>
				</ul>
			</section>

			{/* Paper 2: Texture NCA */}
			<section className='mb-8'>
				<h2 className='text-2xl font-semibold text-purple-mdn'>Self-Organising Textures</h2>
				<p>
					Neural Cellular Automata Model of Pattern Formation, <i>Feb. 11, 2021</i>. doi:{' '}
					<Link
						href='https://doi.org/10.23915/distill.00027.003'
						className='text-purple-mdn font-semibold hover:underline hover:text-purple-mdn-dark transition'
					>
						10.23915/distill.00027.003
					</Link>
				</p>
				<h4 className='italic text-gray-600'>Eyvind Niklasson, Alexander Mordvintsev, Ettore Randazzo, Michael Levin</h4>
				<p className='py-3'>
					NCA are used to generate cohesive textures, rather than specific complex images. The results demonstrate how NCA are suitable for
					mimicking and replicating patterns. In particular, images generated by NCA share features and similarities with the original image
					without being pixel perfect copies. Further, due to the incremental updating nature of the simulation, NCA continuously generate
					smooth animations from a single image.
				</p>
				<p className='py-3'>
					The unique contribution of this paper is primarily its success using pre-trained CNN (VGG-16) as the loss function for NCA.
				</p>
				<p className='py-3'>Below are the results from our re-implementation:</p>

				<div className='grid grid-cols-2 overflow-y-auto gap-4'>
					<div>
						{/* TODO: Check if there is a better way of putting this video in */}
						<video className='w-full rounded-md shadow-sm' loop autoPlay muted>
							<source src='/images/nca_output.mp4' type='video/mp4' />
						</video>
						<p className='text-sm text-center italic'>NCA algorithm in live operation after training.</p>
					</div>
					<div>
						<Image src='/images/knit.jpg' alt='Target Knitted Texture' height={60} width={50} className='w-full rounded-md shadow-sm' />
						<p className='text-sm text-center italic'>Targeted texture pattern for the NCA to replicate.</p>
					</div>
				</div>
			</section>

			{/* Paper 3: Mesh NCA */}
			<section className='mb-8'>
				<h2 className='text-2xl font-semibold text-purple-mdn'>Mesh Neural Cellular Automata</h2>
				<p>
					<i>Jul. 19, 2024</i>. doi:{' '}
					<Link
						href='https://doi.org/10.1145/3658127'
						className='text-purple-mdn font-semibold hover:underline hover:text-purple-mdn-dark transition'
					>
						10.1145/3658127
					</Link>
				</p>
				<h4 className='italic text-gray-600'>
					Ehsan Pajouheshgar, Yitao Xu, Alexander Mordvintsev, Eyvind Niklasson, Tong Zhang, Sabine Süsstrunk
				</h4>
				<p className='py-3'>
					This paper focuses on 3D texture generation, moving NCA onto a mesh or graph. Each cell is now a node, with its neighbours defined
					by graph connections. This allows those textures to seamlessly wrap around 3D objects. In the demonstrations from this paper,
					there are still some flaws in the sharpest corners, however overall the resultant texture is smooth and continuous.
				</p>
			</section>

			{/* Paper 4: DyNCA */}
			<section className='mb-8'>
				<h2 className='text-2xl font-semibold text-purple-mdn'>DyNCA</h2>
				<p>
					Dynamic Texture Synthesis Using Neural Cellular Automata, <i>Mar. 30, 2023</i>. doi:{' '}
					<Link
						href='https://doi.org/10.48550/arXiv.2211.11417'
						className='text-purple-mdn font-semibold hover:underline hover:text-purple-mdn-dark transition'
					>
						10.48550/arXiv.2211.11417
					</Link>
				</p>
				<h4 className='italic text-gray-600'>Ehsan Pajouheshgar, Yitao Xu, Tong Zhang, Sabine Süsstrunk</h4>
				<p className='py-3'>
					This paper takes NCA into the video generation realm. Also based off <i>Self Organising Textures</i> this paper aimed to create
					dynamic directable video-like textures. While this technique was not suited for fast motion scenes, it performed well for
					scenarios such as fire and rising smoke, suitable for background textures.
				</p>
			</section>

			{/* Paper 5: Med-NCA */}
			<section className='mb-8'>
				<h2 className='text-2xl font-semibold text-purple-mdn'>Med-NCA</h2>
				<p>
					Robust and Lightweight Segmentation with Neural Cellular Automata, <i>Feb. 7, 2023</i>. doi:{' '}
					<Link
						href='https://doi.org/10.48550/arXiv.2211.11417'
						className='text-purple-mdn font-semibold hover:underline hover:text-purple-mdn-dark transition'
					>
						10.48550/arXiv.2211.11417
					</Link>
				</p>
				<h4 className='italic text-gray-600'>
					John Kalkhof, Camila González & Anirban Mukhopadhyay <br />
				</h4>
				<p className='py-3'>
					Med-NCA is an image segmentation model, which builds off another proceeding paper <i>Image segmentation via Cellular Automata</i>{' '}
					(Sandler M. et al) and is a part of a series of papers that investigate Neural Cellular Automata as a low-resource medical
					segmentation model. Med-NCA is the first paper to pose NCA as a low memory solution for image segmentation, due to the small model
					sizes, and demonstrates than NCA can effectively segmentation medical grade images while running on Raspberry Pi Zero.
				</p>
				<p className='py-3'>
					Med-NCA's most notable contribution though is usage of a two stage architecture that includes a low and high resolution layer,
					which highlights the issue that NCAs struggle with long-distance communication of information across images, as this architectural
					change sped up the image segmentation process drastically.
				</p>
				<p className='py-3'>
					The authors follow-up this paper by taking NCA to 3D medical scans in{' '}
					<i>M3D-NCA, Robust 3D Segmentation with built in quality control</i>.
				</p>
			</section>
		</div>
	);
}
